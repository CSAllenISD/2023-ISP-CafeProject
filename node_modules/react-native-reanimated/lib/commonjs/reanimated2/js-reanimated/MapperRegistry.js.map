{"version":3,"names":["MapperRegistry","constructor","module","Map","_module","startMapper","mapper","mappers","set","id","updatedSinceLastExecute","stopMapper","delete","execute","updateOrder","i","len","sortedMappers","length","dirty","nodes","values","map","Node","mappersById","forEach","nodesLen","node","outputs","j","restNode","inputs","outi","outputsLen","resti","restLen","_id","children","push","post","postCounter","dfs","index","indexOf","splice","postArray","Object","keys","key","num","parseInt","sort","a","b","needRunOnRender"],"sources":["MapperRegistry.ts"],"sourcesContent":["import { JSReanimated } from './commonTypes';\nimport Mapper from './Mapper';\n\nexport default class MapperRegistry<T> {\n  sortedMappers: Mapper<T>[] = [];\n  mappers: Map<number, Mapper<T>> = new Map();\n  _module: JSReanimated;\n\n  updatedSinceLastExecute = false;\n\n  constructor(module: JSReanimated) {\n    this._module = module;\n  }\n\n  startMapper(mapper: Mapper<T>): number {\n    this.mappers.set(mapper.id, mapper);\n    this.updatedSinceLastExecute = true;\n    return mapper.id;\n  }\n\n  stopMapper(id: number): void {\n    this.mappers.delete(id);\n    this.updatedSinceLastExecute = true;\n  }\n\n  execute(): void {\n    if (this.updatedSinceLastExecute) {\n      this.updateOrder();\n      this.updatedSinceLastExecute = false;\n    }\n\n    for (let i = 0, len = this.sortedMappers.length; i < len; ++i) {\n      const mapper = this.sortedMappers[i];\n      if (mapper.dirty) {\n        mapper.execute();\n      }\n    }\n  }\n\n  updateOrder(): void {\n    const nodes = [...this.mappers.values()].map((mapper) => new Node(mapper));\n\n    const mappersById: Record<number, Mapper<T>> = {};\n    this.mappers.forEach((mapper) => {\n      mappersById[mapper.id] = mapper;\n    });\n\n    // create a graph from array of nodes\n    for (let i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n      const node = nodes[i];\n      if (node.mapper.outputs.length === 0) {\n        continue;\n      }\n      for (let j = 0; j < nodesLen; ++j) {\n        const restNode = nodes[j];\n        if (i === j || restNode.mapper.inputs.length === 0) {\n          continue;\n        }\n        for (\n          let outi = 0, outputsLen = node.mapper.outputs.length;\n          outi < outputsLen;\n          ++outi\n        ) {\n          for (\n            let resti = 0, restLen = restNode.mapper.inputs.length;\n            resti < restLen;\n            ++resti\n          ) {\n            if (\n              node.mapper.outputs[outi]._id ===\n              restNode.mapper.inputs[resti]._id\n            ) {\n              node.children.push(restNode);\n            }\n          }\n        }\n      }\n    }\n\n    const post: Record<number, number> = {};\n    let postCounter = 1;\n    const dfs = (node: Node<T>) => {\n      const index = nodes.indexOf(node);\n      if (index === -1) {\n        // this node has already been handled\n        return;\n      }\n      ++postCounter;\n      nodes.splice(index, 1);\n      if (node.children.length === 0 && nodes.length > 0) {\n        post[node.mapper.id] = postCounter++;\n        dfs(nodes[0]);\n        return;\n      }\n      for (let i = 0, len = node.children.length; i < len; ++i) {\n        dfs(node.children[i]);\n      }\n      post[node.mapper.id] = postCounter++;\n    };\n\n    while (nodes.length) dfs(nodes[0]);\n\n    const postArray = Object.keys(post).map((key) => {\n      const num = parseInt(key);\n      return [num, post[num]];\n    });\n    postArray.sort((a, b) => {\n      return b[1] - a[1];\n    });\n\n    // clear sorted mappers\n    this.sortedMappers = [];\n\n    for (let i = 0, len = postArray.length; i < len; ++i) {\n      const [id] = postArray[i];\n      this.sortedMappers.push(mappersById[id]);\n    }\n  }\n\n  get needRunOnRender(): boolean {\n    return this.updatedSinceLastExecute;\n  }\n}\n\nclass Node<T> {\n  mapper: Mapper<T>;\n  children: Node<T>[];\n\n  constructor(mapper: Mapper<T>, children = []) {\n    this.mapper = mapper;\n    this.children = children;\n  }\n}\n"],"mappings":"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"}
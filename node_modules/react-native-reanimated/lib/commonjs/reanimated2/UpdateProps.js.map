{"version":3,"names":["colorProps","ColorProperties","isConfigured","makeShareable","updatePropsByPlatform","shouldBeUseWeb","_","updates","maybeViewRef","items","forEach","item","_updatePropsJS","global","_IS_FABRIC","viewDescriptors","key","indexOf","processColor","value","viewDescriptor","_updatePropsFabric","shadowNodeWrapper","_updatePropsPaper","tag","name","updateProps","updatePropsJestWrapper","animatedStyle","adapters","adapter","current"],"sources":["UpdateProps.ts"],"sourcesContent":["/* global _updatePropsPaper _updatePropsFabric */\nimport { MutableRefObject } from 'react';\nimport { processColor } from './Colors';\nimport { AnimatedStyle, SharedValue, StyleProps } from './commonTypes';\nimport { makeShareable, isConfigured } from './core';\nimport { Descriptor } from './hook/commonTypes';\nimport { _updatePropsJS } from './js-reanimated';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport { ViewRefSet } from './ViewDescriptorsSet';\n\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nexport const colorProps = [\n  'backgroundColor',\n  'borderBottomColor',\n  'borderColor',\n  'borderLeftColor',\n  'borderRightColor',\n  'borderTopColor',\n  'borderStartColor',\n  'borderEndColor',\n  'color',\n  'shadowColor',\n  'textDecorationColor',\n  'tintColor',\n  'textShadowColor',\n  'overlayColor',\n];\n\nexport const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\n\nlet updatePropsByPlatform;\nif (shouldBeUseWeb()) {\n  updatePropsByPlatform = (\n    _: SharedValue<Descriptor[]>,\n    updates: StyleProps | AnimatedStyle,\n    maybeViewRef: ViewRefSet<any> | undefined\n  ): void => {\n    'worklet';\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach((item, _) => {\n        _updatePropsJS(updates, item);\n      });\n    }\n  };\n} else {\n  if (global._IS_FABRIC) {\n    updatePropsByPlatform = (\n      viewDescriptors: SharedValue<Descriptor[]>,\n      updates: StyleProps | AnimatedStyle,\n      _: ViewRefSet<any> | undefined\n    ): void => {\n      'worklet';\n\n      for (const key in updates) {\n        if (ColorProperties.indexOf(key) !== -1) {\n          updates[key] = processColor(updates[key]);\n        }\n      }\n\n      viewDescriptors.value.forEach((viewDescriptor) => {\n        _updatePropsFabric(viewDescriptor.shadowNodeWrapper, updates);\n      });\n    };\n  } else {\n    updatePropsByPlatform = (\n      viewDescriptors: SharedValue<Descriptor[]>,\n      updates: StyleProps | AnimatedStyle,\n      _: ViewRefSet<any> | undefined\n    ): void => {\n      'worklet';\n\n      for (const key in updates) {\n        if (ColorProperties.indexOf(key) !== -1) {\n          updates[key] = processColor(updates[key]);\n        }\n      }\n      viewDescriptors.value.forEach((viewDescriptor) => {\n        _updatePropsPaper(\n          viewDescriptor.tag,\n          viewDescriptor.name || 'RCTView',\n          updates\n        );\n      });\n    };\n  }\n}\n\nexport const updateProps: (\n  viewDescriptor: SharedValue<Descriptor[]>,\n  updates: StyleProps | AnimatedStyle,\n  maybeViewRef: ViewRefSet<any> | undefined\n) => void = updatePropsByPlatform;\n\nexport const updatePropsJestWrapper = (\n  viewDescriptors: SharedValue<Descriptor[]>,\n  updates: AnimatedStyle,\n  maybeViewRef: ViewRefSet<any> | undefined,\n  animatedStyle: MutableRefObject<AnimatedStyle>,\n  adapters: ((updates: AnimatedStyle) => void)[]\n): void => {\n  adapters.forEach((adapter) => {\n    adapter(updates);\n  });\n  animatedStyle.current.value = {\n    ...animatedStyle.current.value,\n    ...updates,\n  };\n\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\n\nexport default updateProps;\n"],"mappings":";;;;;;;AAEA;;AAEA;;AAEA;;AACA;;AAPA;AAUA;AACO,MAAMA,UAAU,GAAG,CACxB,iBADwB,EAExB,mBAFwB,EAGxB,aAHwB,EAIxB,iBAJwB,EAKxB,kBALwB,EAMxB,gBANwB,EAOxB,kBAPwB,EAQxB,gBARwB,EASxB,OATwB,EAUxB,aAVwB,EAWxB,qBAXwB,EAYxB,WAZwB,EAaxB,iBAbwB,EAcxB,cAdwB,CAAnB;;AAiBA,MAAMC,eAAe,GAAG,CAAC,IAAAC,kBAAA,GAAD,GAAkB,EAAlB,GAAuB,IAAAC,mBAAA,EAAcH,UAAd,CAA/C;;AAEP,IAAII,qBAAJ;;AACA,IAAI,IAAAC,+BAAA,GAAJ,EAAsB;EACpBD,qBAAqB,GAAG,CACtBE,CADsB,EAEtBC,OAFsB,EAGtBC,YAHsB,KAIb;IACT;;IACA,IAAIA,YAAJ,EAAkB;MAChBA,YAAY,CAACC,KAAb,CAAmBC,OAAnB,CAA2B,CAACC,IAAD,EAAOL,CAAP,KAAa;QACtC,IAAAM,4BAAA,EAAeL,OAAf,EAAwBI,IAAxB;MACD,CAFD;IAGD;EACF,CAXD;AAYD,CAbD,MAaO;EACL,IAAIE,MAAM,CAACC,UAAX,EAAuB;IACrBV,qBAAqB,GAAG,CACtBW,eADsB,EAEtBR,OAFsB,EAGtBD,CAHsB,KAIb;MACT;;MAEA,KAAK,MAAMU,GAAX,IAAkBT,OAAlB,EAA2B;QACzB,IAAIN,eAAe,CAACgB,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;UACvCT,OAAO,CAACS,GAAD,CAAP,GAAe,IAAAE,oBAAA,EAAaX,OAAO,CAACS,GAAD,CAApB,CAAf;QACD;MACF;;MAEDD,eAAe,CAACI,KAAhB,CAAsBT,OAAtB,CAA+BU,cAAD,IAAoB;QAChDC,kBAAkB,CAACD,cAAc,CAACE,iBAAhB,EAAmCf,OAAnC,CAAlB;MACD,CAFD;IAGD,CAhBD;EAiBD,CAlBD,MAkBO;IACLH,qBAAqB,GAAG,CACtBW,eADsB,EAEtBR,OAFsB,EAGtBD,CAHsB,KAIb;MACT;;MAEA,KAAK,MAAMU,GAAX,IAAkBT,OAAlB,EAA2B;QACzB,IAAIN,eAAe,CAACgB,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;UACvCT,OAAO,CAACS,GAAD,CAAP,GAAe,IAAAE,oBAAA,EAAaX,OAAO,CAACS,GAAD,CAApB,CAAf;QACD;MACF;;MACDD,eAAe,CAACI,KAAhB,CAAsBT,OAAtB,CAA+BU,cAAD,IAAoB;QAChDG,iBAAiB,CACfH,cAAc,CAACI,GADA,EAEfJ,cAAc,CAACK,IAAf,IAAuB,SAFR,EAGflB,OAHe,CAAjB;MAKD,CAND;IAOD,CAnBD;EAoBD;AACF;;AAEM,MAAMmB,WAIJ,GAAGtB,qBAJL;;;AAMA,MAAMuB,sBAAsB,GAAG,CACpCZ,eADoC,EAEpCR,OAFoC,EAGpCC,YAHoC,EAIpCoB,aAJoC,EAKpCC,QALoC,KAM3B;EACTA,QAAQ,CAACnB,OAAT,CAAkBoB,OAAD,IAAa;IAC5BA,OAAO,CAACvB,OAAD,CAAP;EACD,CAFD;EAGAqB,aAAa,CAACG,OAAd,CAAsBZ,KAAtB,GAA8B,EAC5B,GAAGS,aAAa,CAACG,OAAd,CAAsBZ,KADG;IAE5B,GAAGZ;EAFyB,CAA9B;EAKAmB,WAAW,CAACX,eAAD,EAAkBR,OAAlB,EAA2BC,YAA3B,CAAX;AACD,CAhBM;;;eAkBQkB,W"}
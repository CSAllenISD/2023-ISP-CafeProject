{"version":3,"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","useSharedValue","Extrapolate","EXTEND","CLAMP","IDENTITY","interpolateColorsHSV","value","inputRange","colors","options","h","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","s","v","a","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","r","outputR","g","outputG","b","outputB","getInterpolateRGB","color","processedColor","undefined","getInterpolateHSV","processedHSVColor","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"sources":["interpolateColor.ts"],"sourcesContent":["import {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\nimport { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\ninterface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\ninterface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\nexport const interpolateColor = (\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number => {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n\nexport const interpolateSharableColor = (\n  value: number,\n  interpolateConfig: SharedValue<InterpolateConfig>\n): string | number => {\n  'worklet';\n  let colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateRGB,\n      interpolateConfig.value.options\n    );\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateHSV,\n      interpolateConfig.value.options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"],"mappings":"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"}